{
  "stats": {
    "suites": 2,
    "tests": 32,
    "passes": 25,
    "pending": 0,
    "failures": 7,
    "start": "2024-07-01T16:26:28.710Z",
    "end": "2024-07-01T16:26:32.441Z",
    "duration": 3731,
    "testsRegistered": 32,
    "passPercent": 78.125,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "920b364a-c44b-4237-a4ca-b4330377488e",
      "title": "",
      "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\consents.spec.ts",
      "file": "\\src\\tests\\consents.spec.ts",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 273,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(process.env.MONGO_URI_TEST);\nawait mongoose_1.default.connect(process.env.MONGO_URI_TEST);\nawait mongoose_1.default.connection.db.dropDatabase();",
          "err": {},
          "uuid": "b47d1516-659c-4ccd-854f-3004e91c4127",
          "parentUUID": "920b364a-c44b-4237-a4ca-b4330377488e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 25,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(process.env.MONGO_URI_TEST);\nawait mongoose_1.default.connection.close();",
          "err": {},
          "uuid": "33d5dd45-7c7e-4794-8e53-bda63786aab4",
          "parentUUID": "920b364a-c44b-4237-a4ca-b4330377488e",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "4feffd9a-98b6-4877-8878-d60656df94c7",
          "title": "Consent Routes Tests",
          "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\consents.spec.ts",
          "file": "\\src\\tests\\consents.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Consent Routes Tests\"",
              "fullTitle": "Consent Routes Tests \"before all\" hook in \"Consent Routes Tests\"",
              "timedOut": false,
              "duration": 1317,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock_1.default.cleanAll();\nserverInstance = (0, server_1.startServer)(9090);\n// Create Provider\nconst providerData = testAccount_1.testProvider1;\nconst providerResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(providerData);\nproviderId = providerResponse.body._id;\nselfDesc_providerId = providerData.selfDescriptionURL;\n// Login provider\nconst providerAuthResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: testAccount_1.testProvider1.clientID,\n    clientSecret: testAccount_1.testProvider1.clientSecret,\n});\nproviderJWT = `Bearer ${providerAuthResponse.body.jwt}`;\nproviderBase64 = Buffer.from(providerData.selfDescriptionURL).toString(\"base64\");\n// Create Consumer\nconst consumerData = testAccount_1.testConsumer1;\nconst consumerResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(consumerData);\nconsumerId = consumerResponse.body._id;\nselfDesc_consumerId = consumerData.selfDescriptionURL;\n// Create Consumer 2\nconst consumer2Data = testAccount_1.testConsumer2;\nconst consumer2Response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(consumer2Data);\nselfDesc_consumer2Id = consumer2Data.selfDescriptionURL;\nconsumer2Base64 = Buffer.from(consumer2Data.selfDescriptionURL).toString(\"base64\");\n// Login consumer\nconst consumerAuthResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: testAccount_1.testConsumer1.clientID,\n    clientSecret: testAccount_1.testConsumer1.clientSecret,\n});\nconsumerJWT = `Bearer ${consumerAuthResponse.body.jwt}`;\nconsumerBase64 = Buffer.from(consumerData.selfDescriptionURL).toString(\"base64\");\n// Create User\nconst userData = testAccount_1.testUser1;\nconst userResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/signup`)\n    .send(userData);\nuserId = userResponse.body.user._id;\n// Login user\nconst userAuthresponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/login`)\n    .send({\n    email: testAccount_1.testUser1.email,\n    password: testAccount_1.testUser1.password,\n});\nuserJwt = `Bearer ${userAuthresponse.body.accessToken}`;\n// Create UserIdentifier Provider\nconst providerUserIdentifierResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    email: testAccount_1.testUser1.email,\n    identifier: \"providerUserIdentifier1\",\n});\nproviderUserIdentifier = providerUserIdentifierResponse.body._id;\n// Create UserIdentifier Consumer\nconst consumerUserIdentifierResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", consumerJWT)\n    .send({\n    email: testAccount_1.testUser1.email,\n    identifier: \"consumerUserIdentifier1\",\n});\nconsumerUserIdentifier = consumerUserIdentifierResponse.body._id;",
              "err": {},
              "uuid": "ba24cedc-ed24-4376-a752-efc754ea5117",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Consent Routes Tests\"",
              "fullTitle": "Consent Routes Tests \"after all\" hook in \"Consent Routes Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "serverInstance.server.close();",
              "err": {},
              "uuid": "1f9d333d-dee3-48ee-8413-277ea7a1d7b9",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get available exchanges",
              "fullTitle": "Consent Routes Tests should get available exchanges",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/as?as=provider`)\n    .set(\"Authorization\", providerJWT)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"participant\");\n(0, chai_1.expect)(response.body).to.have.property(\"exchanges\");\n(0, chai_1.expect)(response.body.participant).to.have.property(\"selfDescription\");\n(0, chai_1.expect)(response.body.participant).to.have.property(\"base64SelfDescription\");",
              "err": {},
              "uuid": "182ec32e-29b3-4a5f-b9f0-4c16d3cf84a9",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get the privacy notices",
              "fullTitle": "Consent Routes Tests should get the privacy notices",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${userId}/${providerBase64}/${consumerBase64}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\nprivacyNoticeId = response.body[0]?._id;\n(0, chai_1.expect)(response.body).to.not.be.empty;\n(0, chai_1.expect)(response.body[0]).to.have.property(\"_id\");\n(0, chai_1.expect)(response.body[0]).to.have.property(\"dataProvider\", \"https://api.test.com/v1/catalog/participants/656dfb3e282d47cfa6b66b2b\");\n(0, chai_1.expect)(response.body[0]).to.have.property(\"contract\", \"http://localhost:8888/contracts/65e5d715c99e484e4685a964\");",
              "err": {},
              "uuid": "5eb7f743-064a-4ac2-b690-31fd4559161e",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a privacy notice by id",
              "fullTitle": "Consent Routes Tests should get a privacy notice by id",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${privacyNoticeId}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n(0, chai_1.expect)(response.body).to.have.property(\"_id\").and.to.equal(privacyNoticeId);\n(0, chai_1.expect)(response.body).to.have.property(\"contract\");\n(0, chai_1.expect)(response.body.dataProvider._id).to.equal(testAccount_1.testProvider1.identifier);",
              "err": {},
              "uuid": "e659d79b-88c8-494c-a1c1-b1d5ee906cd2",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give consent",
              "fullTitle": "Consent Routes Tests should give consent",
              "timedOut": false,
              "duration": 270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .send({\n    privacyNoticeId: privacyNoticeId,\n})\n    .expect(201);\nconsentId = response.body._id;\n// expect(response.body.user).to.equal(userId);\n(0, chai_1.expect)(response.body.providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consented).to.equal(true);\n(0, chai_1.expect)(response.body.dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.privacyNotice).to.equal(privacyNoticeId);\n(0, chai_1.expect)(response.body.status).to.equal(\"granted\");",
              "err": {},
              "uuid": "74038cd2-b8e5-4e19-84fa-0abac60b5270",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should triggerDataExchange",
              "fullTitle": "Consent Routes Tests should triggerDataExchange",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// mocking export consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/data-exchange`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"successfully sent consent to the provider's consent export endpoint to trigger the data exchange\");",
              "err": {},
              "uuid": "2446e366-7ae7-4c61-9c28-8825d48f385a",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should revoke consent",
              "fullTitle": "Consent Routes Tests should revoke consent",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .delete(`/v1/consents/${consentId}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\n(0, chai_1.expect)(response.body.status).to.equal(\"revoked\");",
              "err": {},
              "uuid": "c9798119-4aad-4849-bf07-72961e52212f",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "generate pdi-iframe",
              "fullTitle": "Consent Routes Tests generate pdi-iframe",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\n//TODO //nock PDI_ENDPOINT\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/pdi/iframe`)\n    .set(\"Authorization\", providerJWT)\n    .expect(302);",
              "err": {},
              "uuid": "16df229f-72c6-4767-9d4e-249169705bac",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "generate pdi-iframe by privacy notice Id",
              "fullTitle": "Consent Routes Tests generate pdi-iframe by privacy notice Id",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/pdi/iframe`)\n    .set(\"Authorization\", providerJWT)\n    .query({\n    userIdentifier: providerUserIdentifier,\n    privacyNoticeId: privacyNoticeId,\n})\n    .expect(302);",
              "err": {},
              "uuid": "a9aa01f3-ad8d-412d-83e0-c941302c3c62",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserAvailableExchanges",
              "fullTitle": "Consent Routes Tests getUserAvailableExchanges",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/user`)\n    .set(\"Authorization\", userJwt)\n    .query({ participantId: providerId })\n    .expect(200);\ncontractbase64 = response.body.exchanges[0].base64Contract;\n(0, chai_1.expect)(response.body.participant.selfDescription).to.equal(selfDesc_providerId);\n(0, chai_1.expect)(response.body.exchanges).to.not.be.empty;\n(0, chai_1.expect)(response.body.exchanges[0].participantSelfDescription).to.equal(selfDesc_consumerId);",
              "err": {},
              "uuid": "54143434-1393-49a9-af95-6627a8586956",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserPrivacyNoticesByContract",
              "fullTitle": "Consent Routes Tests getUserPrivacyNoticesByContract",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}/${contractbase64}`)\n    .set(\"Authorization\", userJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body[0].dataProvider).to.equal(selfDesc_providerId);\nconsole.log(response.body[0].recipients);\n(0, chai_1.expect)(response.body[0].recipients).to.deep.include(selfDesc_consumerId);",
              "err": {},
              "uuid": "29a4a7c0-4ba3-46b4-9017-2e22f7e7b759",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserPrivacyNoticeById",
              "fullTitle": "Consent Routes Tests getUserPrivacyNoticeById",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${privacyNoticeId}/user`)\n    .set(\"Authorization\", userJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"_id\");\n(0, chai_1.expect)(response.body.contract.orchestrator).to.equal(testAccount_1.testProvider1.did);\n(0, chai_1.expect)(response.body.contract.status).to.equal(\"pending\");\n(0, chai_1.expect)(response.body.dataProvider._id).to.equal(testAccount_1.testProvider1.identifier);\n(0, chai_1.expect)(response.body.purposes[0].providedBy).to.equal(testAccount_1.testConsumer1.identifier);\n(0, chai_1.expect)(response.body.data[0].providedBy).to.equal(testAccount_1.testProvider1.identifier);",
              "err": {},
              "uuid": "4ccf539e-f724-4b68-b0a4-16d78ad770af",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "giveConsentUser",
              "fullTitle": "Consent Routes Tests giveConsentUser",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/user`)\n    .send({ privacyNoticeId: privacyNoticeId })\n    .set(\"Authorization\", userJwt)\n    .expect(201);\nconsole.log(privacyNoticeId);\n(0, chai_1.expect)(response.body).to.have.property(\"contract\");\n// expect(response.body.dataProvider._id).to.equal(providerId);",
              "err": {},
              "uuid": "032f9439-cfdf-45b4-8cda-60b943420d9f",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsents - by user",
              "fullTitle": "Consent Routes Tests should getUserConsents - by user",
              "timedOut": false,
              "duration": 50,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/me`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"consents\");\n(0, chai_1.expect)(response.body.consents[0]._id).to.equal(consentId);\n(0, chai_1.expect)(response.body.consents[0].providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consents[0].consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consents[0].consented).to.equal(true);\n(0, chai_1.expect)(response.body.consents[0].dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.consents[0].dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.consents[0].status).to.equal(\"granted\");\n(0, chai_1.expect)(response.body.consents[0].privacyNotice).to.equal(privacyNoticeId);",
              "err": {
                "message": "AssertionError: expected false to equal true",
                "estack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (src\\tests\\consents.spec.ts:340:52)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "bd2a0cf8-0ee8-4213-84ba-79af7dbaf876",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsents - by participant",
              "fullTitle": "Consent Routes Tests should getUserConsents - by participant",
              "timedOut": false,
              "duration": 39,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/participants/${providerUserIdentifier}/`)\n    .set(\"Authorization\", providerJWT)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"consents\");\n(0, chai_1.expect)(response.body.consents[0]._id).to.equal(consentId);\n(0, chai_1.expect)(response.body.consents[0].providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consents[0].consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consents[0].consented).to.equal(true);\n(0, chai_1.expect)(response.body.consents[0].dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.consents[0].dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.consents[0].status).to.equal(\"granted\");\n(0, chai_1.expect)(response.body.consents[0].privacyNotice).to.equal(privacyNoticeId);\nconsole.log(privacyNoticeId);\nconsole.log(response.body.consents[0].privacyNotice);",
              "err": {
                "message": "AssertionError: expected '6682d8b764e769dc1a3462ba' to equal '6682d8b764e769dc1a34629c'",
                "estack": "AssertionError: expected '6682d8b764e769dc1a3462ba' to equal '6682d8b764e769dc1a34629c'\n    at Context.<anonymous> (src\\tests\\consents.spec.ts:353:46)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 6682d8b764e769dc1a3462ba\n+ 6682d8b764e769dc1a34629c\n"
              },
              "uuid": "fb60ce78-8793-4f48-98dd-3ef173d65446",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsentById - by user",
              "fullTitle": "Consent Routes Tests should getUserConsentById - by user",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/me/${consentId}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\n(0, chai_1.expect)(response.body._id).to.equal(consentId);\n(0, chai_1.expect)(response.body.providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consented).to.equal(true);\n(0, chai_1.expect)(response.body.dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.status).to.equal(\"granted\");\n(0, chai_1.expect)(response.body.privacyNotice).to.equal(privacyNoticeId);",
              "err": {
                "message": "AssertionError: expected false to equal true",
                "estack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (src\\tests\\consents.spec.ts:382:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "1c9e9e00-e23d-46c5-80ac-3a04154f3ad6",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsentById - by participant",
              "fullTitle": "Consent Routes Tests should getUserConsentById - by participant",
              "timedOut": false,
              "duration": 95,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/participants/${providerUserIdentifier}/${consentId}`)\n    .set(\"Authorization\", providerJWT)\n    .expect(200);\n(0, chai_1.expect)(response.body._id).to.equal(consentId);\n(0, chai_1.expect)(response.body.providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consented).to.equal(true);\n(0, chai_1.expect)(response.body.dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.status).to.equal(\"granted\");\n(0, chai_1.expect)(response.body.privacyNotice).to.equal(privacyNoticeId);",
              "err": {
                "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (src\\tests\\consents.spec.ts:394:8)\n    at processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at Object.onceWrapper (node:events:631:28)\n    at Server.emit (node:events:517:28)\n    at emitCloseNT (node:net:2221:8)\n    at processTicksAndRejections (node:internal/process/task_queues:81:21)",
                "diff": null
              },
              "uuid": "366c9b14-dbe3-404f-a45e-20308c96b142",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should attachTokenToConsent",
              "fullTitle": "Consent Routes Tests should attachTokenToConsent",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Mocking import consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/import\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/token`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    token,\n    providerDataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n})\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"successfully forwarded consent to the data consumer\");",
              "err": {},
              "uuid": "d6dd282d-4e96-4880-878e-9660016330c2",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the consent",
              "fullTitle": "Consent Routes Tests should validate the consent",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//mocking export consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/validate`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    token\n})\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"token matches consent token\");\n(0, chai_1.expect)(response.body).to.have.property(\"verified\", true);",
              "err": {},
              "uuid": "3a405a1a-17e1-414c-a2eb-b4f3d795ad38",
              "parentUUID": "4feffd9a-98b6-4877-8878-d60656df94c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
              "title": "Test error",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\consents.spec.ts",
              "file": "\\src\\tests\\consents.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not getUserConsents with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not getUserConsents with no authorization",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/me`)\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "2a8c77f0-bb69-4802-8794-c4a5e16bb18a",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "resume Consent with status not draft&pending",
                  "fullTitle": "Consent Routes Tests Test error resume Consent with status not draft&pending",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/resume`)\n    .send({\n    internalID: providerUserIdentifier,\n    email: testAccount_1.testUser1.email,\n})\n    .query({ consentId: consentId })\n    .set(\"Authorization\", providerJWT)\n    .expect(400);",
                  "err": {},
                  "uuid": "f8b34f0b-d1d1-4e95-8dd7-47e66a340af5",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get available exchanges with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not get available exchanges with no authorization",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/as?as=provider`)\n    .expect(401);",
                  "err": {},
                  "uuid": "2dae14c7-c7b1-4fb7-8fb1-d5fb60f46cd6",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not getUserAvailableExchanges for a non-existent participant",
                  "fullTitle": "Consent Routes Tests Test error should not getUserAvailableExchanges for a non-existent participant",
                  "timedOut": false,
                  "duration": 23,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/user`)\n    .set(\"Authorization\", userJwt)\n    .query({ participantId: nonExistentId })\n    .expect(404);\nconsole.log(response.body);\n(0, chai_1.expect)(response.body.Error).to.equal(\"Participant not found\");",
                  "err": {
                    "message": "Error: expected 404 \"Not Found\", got 500 \"Internal Server Error\"",
                    "estack": "Error: expected 404 \"Not Found\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (src\\tests\\consents.spec.ts:519:10)\n    at processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at Object.onceWrapper (node:events:631:28)\n    at Server.emit (node:events:517:28)\n    at emitCloseNT (node:net:2221:8)\n    at processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "4f1cd87f-9ffd-4a9d-89fd-da1530433597",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get privacy notices by participant with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not get privacy notices by participant with no authorization",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}`)\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "dc4d6d73-d2f7-4c4a-8783-bdf798668b96",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not getUserPrivacyNotices with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not getUserPrivacyNotices with no authorization",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}/${consumerBase64}`)\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "2ab1ba23-4c30-483a-8151-eb6150db4882",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not getUserPrivacyNotices By a non-existent contract",
                  "fullTitle": "Consent Routes Tests Test error should not getUserPrivacyNotices By a non-existent contract",
                  "timedOut": false,
                  "duration": 134,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst contract2 = \"http://localhost:8888/contracts/65d624e80e4afe01b8906e14\";\ncontract2base64 = Buffer.from(contract2).toString(\"base64\");\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}/${contract2base64}`)\n    .set(\"Authorization\", userJwt)\n    .expect(404);\n(0, chai_1.expect)(response.body.error).to.equal(\"No contracts found\");\nconsole.log(response.body);",
                  "err": {
                    "message": "Error: expected 404 \"Not Found\", got 500 \"Internal Server Error\"",
                    "estack": "Error: expected 404 \"Not Found\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (src\\tests\\consents.spec.ts:584:8)\n    at processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at Object.onceWrapper (node:events:631:28)\n    at Server.emit (node:events:517:28)\n    at emitCloseNT (node:net:2221:8)\n    at processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "5ba08f51-3980-4984-b451-90e4a7f38f0f",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get privacy notice by a non-existent id -by participant",
                  "fullTitle": "Consent Routes Tests Test error should not get privacy notice by a non-existent id -by participant",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${nonExistentId}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(404);\n(0, chai_1.expect)(response.body.error).to.equal(\"Privacy notice not found\");",
                  "err": {},
                  "uuid": "8e6c4d0f-09a0-4474-93c1-5e79eebfe283",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get privacy notice by a non-existent id -by user",
                  "fullTitle": "Consent Routes Tests Test error should not get privacy notice by a non-existent id -by user",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${nonExistentId}/user`)\n    .set(\"Authorization\", userJwt);\n(0, chai_1.expect)(response.status).to.be.equal(404);\n(0, chai_1.expect)(response.body.error).to.equal(\"Privacy notice not found\");",
                  "err": {},
                  "uuid": "deb0c5c4-0f52-43aa-9084-0e1f11414d33",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not give consent with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not give consent with no authorization",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents`)\n    .send({\n    privacyNoticeId: privacyNoticeId,\n})\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "0c695afc-00ea-4967-9d0c-9dca5ee7110b",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to revoke non existent consent",
                  "fullTitle": "Consent Routes Tests Test error should fail to revoke non existent consent",
                  "timedOut": false,
                  "duration": 21,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .delete(`/v1/consents/${nonExistentId}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(404);\nconsole.log(response.body);\n(0, chai_1.expect)(response.body.error).to.equal(\"consent not found\");",
                  "err": {
                    "message": "Error: expected 404 \"Not Found\", got 500 \"Internal Server Error\"",
                    "estack": "Error: expected 404 \"Not Found\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (src\\tests\\consents.spec.ts:692:10)\n    at processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at Object.onceWrapper (node:events:631:28)\n    at Server.emit (node:events:517:28)\n    at emitCloseNT (node:net:2221:8)\n    at processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "ec0249bb-010f-4868-93e7-bf128be87dda",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger data exchange for a non-existent consent",
                  "fullTitle": "Consent Routes Tests Test error should not trigger data exchange for a non-existent consent",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/6601a6265cbdad603e4e9a8c/data-exchange`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .send({ privacyNoticeId: privacyNoticeId })\n    .expect(404);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"consent not found\");",
                  "err": {},
                  "uuid": "76112a16-bcf8-40dd-90c9-a20d57bb91d0",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not attach token to a non-existent consent",
                  "fullTitle": "Consent Routes Tests Test error should not attach token to a non-existent consent",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Mocking import consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/import\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${nonExistentId}/token`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    token,\n    providerDataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n})\n    .expect(404);\n(0, chai_1.expect)(response.body.error).to.equal(\"Consent not found\");",
                  "err": {},
                  "uuid": "9dc85536-a6a5-421e-b81a-6e90afc9831e",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate the consent with a token not attached to consent",
                  "fullTitle": "Consent Routes Tests Test error should not validate the consent with a token not attached to consent",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const notAttachedToken = crypto_1.default.randomUUID();\n//mocking export consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/validate`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    notAttachedToken,\n})\n    .expect(400);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"token does not match consent token\");",
                  "err": {},
                  "uuid": "fcee1f5d-7d47-4693-a289-70f25c2e718d",
                  "parentUUID": "fcded2a6-3e9b-4c24-9910-3cacda0a9844",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a8c77f0-bb69-4802-8794-c4a5e16bb18a",
                "f8b34f0b-d1d1-4e95-8dd7-47e66a340af5",
                "2dae14c7-c7b1-4fb7-8fb1-d5fb60f46cd6",
                "dc4d6d73-d2f7-4c4a-8783-bdf798668b96",
                "2ab1ba23-4c30-483a-8151-eb6150db4882",
                "8e6c4d0f-09a0-4474-93c1-5e79eebfe283",
                "deb0c5c4-0f52-43aa-9084-0e1f11414d33",
                "0c695afc-00ea-4967-9d0c-9dca5ee7110b",
                "76112a16-bcf8-40dd-90c9-a20d57bb91d0",
                "9dc85536-a6a5-421e-b81a-6e90afc9831e",
                "fcee1f5d-7d47-4693-a289-70f25c2e718d"
              ],
              "failures": [
                "4f1cd87f-9ffd-4a9d-89fd-da1530433597",
                "5ba08f51-3980-4984-b451-90e4a7f38f0f",
                "ec0249bb-010f-4868-93e7-bf128be87dda"
              ],
              "pending": [],
              "skipped": [],
              "duration": 416,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            }
          ],
          "passes": [
            "182ec32e-29b3-4a5f-b9f0-4c16d3cf84a9",
            "5eb7f743-064a-4ac2-b690-31fd4559161e",
            "e659d79b-88c8-494c-a1c1-b1d5ee906cd2",
            "74038cd2-b8e5-4e19-84fa-0abac60b5270",
            "2446e366-7ae7-4c61-9c28-8825d48f385a",
            "c9798119-4aad-4849-bf07-72961e52212f",
            "16df229f-72c6-4767-9d4e-249169705bac",
            "a9aa01f3-ad8d-412d-83e0-c941302c3c62",
            "54143434-1393-49a9-af95-6627a8586956",
            "29a4a7c0-4ba3-46b4-9017-2e22f7e7b759",
            "4ccf539e-f724-4b68-b0a4-16d78ad770af",
            "032f9439-cfdf-45b4-8cda-60b943420d9f",
            "d6dd282d-4e96-4880-878e-9660016330c2",
            "3a405a1a-17e1-414c-a2eb-b4f3d795ad38"
          ],
          "failures": [
            "bd2a0cf8-0ee8-4213-84ba-79af7dbaf876",
            "fb60ce78-8793-4f48-98dd-3ef173d65446",
            "1c9e9e00-e23d-46c5-80ac-3a04154f3ad6",
            "366c9b14-dbe3-404f-a45e-20308c96b142"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1626,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
