{
  "stats": {
    "suites": 3,
    "tests": 43,
    "passes": 43,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-03T01:10:38.871Z",
    "end": "2025-01-03T01:10:41.090Z",
    "duration": 2219,
    "testsRegistered": 43,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e7194c2c-4eb0-4fa5-a90f-6eea74598116",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 98,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await mongoose_1.default.connect(process.env.MONGO_URI_TEST);\nawait mongoose_1.default.connection.db.dropDatabase();",
          "err": {},
          "uuid": "ab4e6308-a983-4132-8e28-08f46c8dd6e8",
          "parentUUID": "e7194c2c-4eb0-4fa5-a90f-6eea74598116",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 12,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await mongoose_1.default.connection.close();",
          "err": {},
          "uuid": "d7f01cb2-7c88-4f54-ab3e-70cebbf98727",
          "parentUUID": "e7194c2c-4eb0-4fa5-a90f-6eea74598116",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a888baca-d120-445b-8fd5-1a91d77f10cd",
          "title": "Consent Agent Routes Tests",
          "fullFile": "D:\\Visions\\consent-manager\\src\\tests\\agent.spec.ts",
          "file": "\\src\\tests\\agent.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Consent Agent Routes Tests\"",
              "fullTitle": "Consent Agent Routes Tests \"before all\" hook in \"Consent Agent Routes Tests\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await mongoose_1.default.connect(process.env.MONGO_URI_TEST);\n    await mongoose_1.default.connection.dropDatabase();\n}\ncatch (error) {\n    console.error(\"Error connecting to MongoDB:\", error);\n    throw error;\n}\n//Consent Agent setup\nconst configFilePath = path_1.default.resolve(__dirname, \"./mocks/consent-agent.config.json\");\nif (!fs_1.default.existsSync(configFilePath)) {\n    throw new Error(`Config file not found at path: ${configFilePath}`);\n}\nconst configContent = fs_1.default.readFileSync(configFilePath, 'utf8');\nconst config = JSON.parse(configContent);\nconfig.dataProviderConfig.forEach((configItem) => {\n    configItem.url = process.env.MONGO_URI_TEST;\n});\nfs_1.default.writeFileSync(configFilePath, JSON.stringify(config, null, 2));\nserverInstance = await (0, server_1.startServer)(9090, \"./tests/mocks/consent-agent.config.json\");",
              "err": {},
              "uuid": "569576b3-1db9-4075-9e01-c8129fc8cc88",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Consent Agent Routes Tests\"",
              "fullTitle": "Consent Agent Routes Tests \"after all\" hook in \"Consent Agent Routes Tests\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose_1.default.connection.close();\nserverInstance.server.close();",
              "err": {},
              "uuid": "e7e1061b-20b4-4c4b-b8d8-c4459e5cf3e6",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get 401 unauthorized",
              "fullTitle": "Consent Agent Routes Tests should get 401 unauthorized",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/1/configurations`)\n    .timeout(100)\n    .expect(401);\n(0, chai_1.expect)(response.body).to.be.an('object');\n(0, chai_1.expect)(response.body).to.have.property('message', \"Authorization header missing or invalid\");",
              "err": {},
              "uuid": "de94f369-9e18-4516-bc30-2050ea359b25",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get a configuration from non existent profile",
              "fullTitle": "Consent Agent Routes Tests should not get a configuration from non existent profile",
              "timedOut": false,
              "duration": 273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create User\nconst userData = testAccount_1.testUser1;\nconst userResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/signup`)\n    .send(userData);\nuserId = userResponse.body.user._id;\n// Login user\nconst userAuthresponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/login`)\n    .send({\n    email: testAccount_1.testUser1.email,\n    password: testAccount_1.testUser1.password,\n});\nuserJwt = `Bearer ${userAuthresponse.body.accessToken}`;\nawait new Promise(resolve => setTimeout(resolve, 100));\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/1/configurations`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100);\n(0, chai_1.expect)(response.body).to.be.an('object');\n(0, chai_1.expect)(response.body).to.have.property('error', \"Profile not found\");",
              "err": {},
              "uuid": "bf524d22-cde5-41ea-b714-d6062cd79e09",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a configuration from profile",
              "fullTitle": "Consent Agent Routes Tests should get a configuration from profile",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/${userId}/configurations`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100);\n(0, chai_1.expect)(response.body).to.be.an('object');\n(0, chai_1.expect)(response.body).to.have.property('allowRecommendations', true);",
              "err": {},
              "uuid": "40f9fd4a-0fce-4f28-9fdc-0c7e8139c0bf",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a configuration from profile",
              "fullTitle": "Consent Agent Routes Tests should update a configuration from profile",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .put(`/v1/profile/${userId}/configurations`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .send({\n    configurations: {\n        allowRecommendations: true\n    }\n})\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('object');\n(0, chai_1.expect)(response.body).to.have.property('configurations');\n(0, chai_1.expect)(response.body.configurations).to.have.property('allowRecommendations', true);",
              "err": {},
              "uuid": "6b10ca1d-aec5-4fb1-9911-cadd5e52ce9b",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get recommendations from profile",
              "fullTitle": "Consent Agent Routes Tests should get recommendations from profile",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/${userId}/recommendations/consent`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('array');",
              "err": {},
              "uuid": "0dceb3ee-9144-4186-8fd8-51ee655bc6e4",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get data exchanges recommendations from profile",
              "fullTitle": "Consent Agent Routes Tests should get data exchanges recommendations from profile",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/${userId}/recommendations/dataexchanges`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('array');",
              "err": {},
              "uuid": "54200915-a7ec-43b5-817c-b33a2a6d7353",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get preferences from profile",
              "fullTitle": "Consent Agent Routes Tests should get preferences from profile",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/${userId}/preferences`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('array');",
              "err": {},
              "uuid": "bb608819-c2c8-4e2c-82c1-3f4e2a59f223",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle adding preference to profile",
              "fullTitle": "Consent Agent Routes Tests should handle adding preference to profile",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const preference = [\n    {\n        'participant': participant,\n        'asDataProvider': {\n            'authorizationLevel': 'never',\n            'conditions': [\n                {\n                    'time': {\n                        'dayOfWeek': [\n                            '0'\n                        ],\n                        'startTime': '2024-03-27T14:08:19.986Z',\n                        'endTime': '2025-03-27T14:08:19.986Z'\n                    }\n                }\n            ]\n        },\n        'asServiceProvider': {\n            'authorizationLevel': 'always',\n            'conditions': [\n                {\n                    'time': {\n                        'dayOfWeek': [\n                            '0'\n                        ],\n                        'startTime': '2024-03-27T14:08:19.986Z',\n                        'endTime': '2025-03-27T14:08:19.986Z'\n                    },\n                    'location': {\n                        'countryCode': 'US'\n                    }\n                }\n            ]\n        }\n    }\n];\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/profile/${userId}/preferences`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .send({ preference })\n    .expect(201);\n(0, chai_1.expect)(response.body).to.be.an('array');\n(0, chai_1.expect)(response.body[0]).to.be.an('object');\n(0, chai_1.expect)(response.body[0]).to.have.property('_id');\npreferenceId = response.body[0]._id;",
              "err": {},
              "uuid": "5f479a6d-3e60-4388-8ad9-d828d8382614",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get preference by id for profile",
              "fullTitle": "Consent Agent Routes Tests should get preference by id for profile",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/${userId}/preferences/${preferenceId}`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('array');\n(0, chai_1.expect)(response.body[0]).to.be.an('object');\n(0, chai_1.expect)(response.body[0]).to.have.property('_id');",
              "err": {},
              "uuid": "fa73130c-c6dd-42e6-bf00-adf6113d0a98",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle updating a preference from profile",
              "fullTitle": "Consent Agent Routes Tests should handle updating a preference from profile",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const preference = {\n    'asDataProvider': {\n        'authorizationLevel': 'always'\n    }\n};\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .put(`/v1/profile/${userId}/preferences/${preferenceId}`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .send(preference)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('array');\n(0, chai_1.expect)(response.body[0]).to.be.an('object');\n(0, chai_1.expect)(response.body[0]).to.have.property('_id');\n(0, chai_1.expect)(response.body[0]).to.have.property('asDataProvider');\n(0, chai_1.expect)(response.body[0].asDataProvider).to.have.property('authorizationLevel', 'always');",
              "err": {},
              "uuid": "595b93e1-2137-4adc-a18b-b28154c36acb",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle delete a preference from profile",
              "fullTitle": "Consent Agent Routes Tests should handle delete a preference from profile",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .delete(`/v1/profile/${userId}/preferences/${preferenceId}`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('array');",
              "err": {},
              "uuid": "8dd80851-8fcc-442c-bc11-ec8dda8d540e",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a profile from URI",
              "fullTitle": "Consent Agent Routes Tests should get a profile from URI",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/${userId}`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('object');\n(0, chai_1.expect)(response.body).to.have.property('_id');\n(0, chai_1.expect)(response.body).to.have.property('uri', userId);",
              "err": {},
              "uuid": "add8037c-ecbc-4889-bf30-7043d759895a",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all profiles",
              "fullTitle": "Consent Agent Routes Tests should get all profiles",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.an('array');",
              "err": {},
              "uuid": "438b1d4d-c215-4341-b45e-2dee8deb33eb",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a match for a profile",
              "fullTitle": "Consent Agent Routes Tests should get a match for a profile",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/profile/${userId}/preferences/match?participant=${participant}&asDataProvider=true`)\n    .set(\"Authorization\", userJwt)\n    .timeout(100)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.be.equal(false);",
              "err": {},
              "uuid": "71498c64-217f-4f70-b2f7-a279380bf3fa",
              "parentUUID": "a888baca-d120-445b-8fd5-1a91d77f10cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de94f369-9e18-4516-bc30-2050ea359b25",
            "bf524d22-cde5-41ea-b714-d6062cd79e09",
            "40f9fd4a-0fce-4f28-9fdc-0c7e8139c0bf",
            "6b10ca1d-aec5-4fb1-9911-cadd5e52ce9b",
            "0dceb3ee-9144-4186-8fd8-51ee655bc6e4",
            "54200915-a7ec-43b5-817c-b33a2a6d7353",
            "bb608819-c2c8-4e2c-82c1-3f4e2a59f223",
            "5f479a6d-3e60-4388-8ad9-d828d8382614",
            "fa73130c-c6dd-42e6-bf00-adf6113d0a98",
            "595b93e1-2137-4adc-a18b-b28154c36acb",
            "8dd80851-8fcc-442c-bc11-ec8dda8d540e",
            "add8037c-ecbc-4889-bf30-7043d759895a",
            "438b1d4d-c215-4341-b45e-2dee8deb33eb",
            "71498c64-217f-4f70-b2f7-a279380bf3fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 350,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        },
        {
          "uuid": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
          "title": "Consent Routes Tests",
          "fullFile": "D:\\Visions\\consent-manager\\src\\tests\\consents.spec.ts",
          "file": "\\src\\tests\\consents.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Consent Routes Tests\"",
              "fullTitle": "Consent Routes Tests \"before all\" hook in \"Consent Routes Tests\"",
              "timedOut": false,
              "duration": 427,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock_1.default.cleanAll();\ntry {\n    await mongoose_1.default.connect(process.env.MONGO_URI_TEST);\n    await mongoose_1.default.connection.dropDatabase();\n    await mongoose_1.default.connection.db.dropDatabase();\n}\ncatch (error) {\n    console.error(\"Error connecting to MongoDB:\", error);\n    throw error;\n}\nserverInstance = await (0, server_1.startServer)(9090);\n// Create Provider\nconst providerData = testAccount_1.testProvider1;\nconst providerResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(providerData);\nproviderId = providerResponse.body._id;\nselfDesc_providerId = providerData.selfDescriptionURL;\n// Login provider\nconst providerAuthResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: testAccount_1.testProvider1.clientID,\n    clientSecret: testAccount_1.testProvider1.clientSecret,\n});\nproviderJWT = `Bearer ${providerAuthResponse.body.jwt}`;\nproviderBase64 = Buffer.from(providerData.selfDescriptionURL).toString(\"base64\");\n// Create Consumer\nconst consumerData = testAccount_1.testConsumer1;\nconst consumerResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(consumerData);\nconsumerId = consumerResponse.body._id;\nselfDesc_consumerId = consumerData.selfDescriptionURL;\n// Create Consumer 2\nconst consumer2Data = testAccount_1.testConsumer2;\nconst consumer2Response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(consumer2Data);\nselfDesc_consumer2Id = consumer2Data.selfDescriptionURL;\nconsumer2Base64 = Buffer.from(consumer2Data.selfDescriptionURL).toString(\"base64\");\n// Login consumer\nconst consumerAuthResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: testAccount_1.testConsumer1.clientID,\n    clientSecret: testAccount_1.testConsumer1.clientSecret,\n});\nconsumerJWT = `Bearer ${consumerAuthResponse.body.jwt}`;\nconsumerBase64 = Buffer.from(consumerData.selfDescriptionURL).toString(\"base64\");\n// Create User\nconst userData = testAccount_1.testUser1;\nconst userResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/signup`)\n    .send(userData);\nuserId = userResponse.body.user._id;\n// Login user\nconst userAuthresponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/login`)\n    .send({\n    email: testAccount_1.testUser1.email,\n    password: testAccount_1.testUser1.password,\n});\nuserJwt = `Bearer ${userAuthresponse.body.accessToken}`;\n// Create UserIdentifier Provider\nconst providerUserIdentifierResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    email: testAccount_1.testUser1.email,\n    identifier: \"providerUserIdentifier1\",\n});\nproviderUserIdentifier = providerUserIdentifierResponse.body._id;\n// Create UserIdentifier Consumer\nconst consumerUserIdentifierResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", consumerJWT)\n    .send({\n    email: testAccount_1.testUser1.email,\n    identifier: \"consumerUserIdentifier1\",\n});\nconsumerUserIdentifier = consumerUserIdentifierResponse.body._id;",
              "err": {},
              "uuid": "2507b6e8-50d5-4e37-966d-d9e8202f5d70",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Consent Routes Tests\"",
              "fullTitle": "Consent Routes Tests \"after all\" hook in \"Consent Routes Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "serverInstance.server.close();",
              "err": {},
              "uuid": "0142426c-dff7-4406-8b9f-276957c2b8b5",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get available exchanges",
              "fullTitle": "Consent Routes Tests should get available exchanges",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/as?as=provider`)\n    .set(\"Authorization\", providerJWT)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"participant\");\n(0, chai_1.expect)(response.body).to.have.property(\"exchanges\");\n(0, chai_1.expect)(response.body.participant).to.have.property(\"selfDescription\");\n(0, chai_1.expect)(response.body.participant).to.have.property(\"base64SelfDescription\");",
              "err": {},
              "uuid": "0dcd696a-7295-402f-a927-0fa975a10022",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get the privacy notices",
              "fullTitle": "Consent Routes Tests should get the privacy notices",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${userId}/${providerBase64}/${consumerBase64}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\nprivacyNoticeId = response.body[0]?._id;\n(0, chai_1.expect)(response.body).to.not.be.empty;\n(0, chai_1.expect)(response.body[0]).to.have.property(\"_id\");\n(0, chai_1.expect)(response.body[0]).to.have.property(\"dataProvider\", \"https://api.test.com/v1/catalog/participants/656dfb3e282d47cfa6b66b2b\");\n(0, chai_1.expect)(response.body[0]).to.have.property(\"contract\", \"http://localhost:8888/contracts/65e5d715c99e484e4685a964\");",
              "err": {},
              "uuid": "9a88acb3-234b-48d6-988e-5caa6ff95af4",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a privacy notice by id",
              "fullTitle": "Consent Routes Tests should get a privacy notice by id",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${privacyNoticeId}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n(0, chai_1.expect)(response.body).to.have.property(\"_id\").and.to.equal(privacyNoticeId);\n(0, chai_1.expect)(response.body).to.have.property(\"contract\");\n(0, chai_1.expect)(response.body.dataProvider._id).to.equal(testAccount_1.testProvider1.identifier);",
              "err": {},
              "uuid": "17a50f0c-2d31-4092-a289-d4526b94a2a7",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give consent",
              "fullTitle": "Consent Routes Tests should give consent",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .send({\n    privacyNoticeId: privacyNoticeId,\n})\n    .expect(201);\nconsentId = response.body.record.recordId;\n(0, chai_1.expect)(response.body.event[0].eventState).to.equal(\"consent given\");\n(0, chai_1.expect)(response.body.piiProcessing.privacyNotice).to.equal(privacyNoticeId);",
              "err": {},
              "uuid": "ed33d961-42f0-4d14-a40c-15621c8eec7c",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "resumeConsent",
              "fullTitle": "Consent Routes Tests resumeConsent",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/resume`)\n    .send({\n    internalID: providerUserIdentifier,\n    email: testAccount_1.testUser1.email,\n})\n    .set(\"Authorization\", providerJWT)\n    .expect(400);",
              "err": {},
              "uuid": "a3e8b130-03ce-4968-959e-72f33752fafe",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should triggerDataExchange",
              "fullTitle": "Consent Routes Tests should triggerDataExchange",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// mocking export consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/data-exchange`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Successfully sent consent to the provider's consent export endpoint to trigger the data exchange\");",
              "err": {},
              "uuid": "b082c567-bc52-4e8e-b712-12ced16abfda",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should revoke consent",
              "fullTitle": "Consent Routes Tests should revoke consent",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .delete(`/v1/consents/${consentId}`)\n    .set(\"Authorization\", userJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body.event[response.body.event.length - 1].eventState).to.equal(\"consent revoked\");",
              "err": {},
              "uuid": "01f53024-1c20-4179-80b5-273367e95f13",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "generate pdi-iframe",
              "fullTitle": "Consent Routes Tests generate pdi-iframe",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\n//TODO //nock PDI_ENDPOINT\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/pdi/iframe`)\n    .set(\"Authorization\", providerJWT)\n    .expect(302);",
              "err": {},
              "uuid": "1f9e7c24-f141-4aab-92f7-13fc061730a5",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "generate pdi-iframe by privacy notice Id",
              "fullTitle": "Consent Routes Tests generate pdi-iframe by privacy notice Id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/pdi/iframe`)\n    .set(\"Authorization\", providerJWT)\n    .query({\n    userIdentifier: providerUserIdentifier,\n    privacyNoticeId: privacyNoticeId,\n})\n    .expect(302);",
              "err": {},
              "uuid": "17808371-ab55-4a11-b652-e7fad7e2f901",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserAvailableExchanges",
              "fullTitle": "Consent Routes Tests getUserAvailableExchanges",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/user`)\n    .set(\"Authorization\", userJwt)\n    .query({ participantId: providerId })\n    .expect(200);\ncontractbase64 = response.body.exchanges[0].base64Contract;\n(0, chai_1.expect)(response.body.participant.selfDescription).to.equal(selfDesc_providerId);\n(0, chai_1.expect)(response.body.exchanges).to.not.be.empty;\n(0, chai_1.expect)(response.body.exchanges[0].participantSelfDescription).to.equal(selfDesc_consumerId);",
              "err": {},
              "uuid": "9de959f5-8082-42bb-ba6a-fee0cc0f8fd5",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserPrivacyNoticesByContract",
              "fullTitle": "Consent Routes Tests getUserPrivacyNoticesByContract",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}/${contractbase64}`)\n    .set(\"Authorization\", userJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body[0].dataProvider).to.equal(selfDesc_providerId);\n(0, chai_1.expect)(response.body[0].recipients).to.deep.include(selfDesc_consumerId);",
              "err": {},
              "uuid": "bb95124d-c7aa-4755-aff4-97de4cd63221",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserPrivacyNoticeById",
              "fullTitle": "Consent Routes Tests getUserPrivacyNoticeById",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${privacyNoticeId}/user`)\n    .set(\"Authorization\", userJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"_id\");\n(0, chai_1.expect)(response.body.contract.orchestrator).to.equal(testAccount_1.testProvider1.did);\n(0, chai_1.expect)(response.body.contract.status).to.equal(\"pending\");\n(0, chai_1.expect)(response.body.dataProvider._id).to.equal(testAccount_1.testProvider1.identifier);\n(0, chai_1.expect)(response.body.purposes[0].providedBy).to.equal(testAccount_1.testConsumer1.identifier);\n(0, chai_1.expect)(response.body.data[0].providedBy).to.equal(testAccount_1.testProvider1.identifier);",
              "err": {},
              "uuid": "a5a5abc6-233b-4106-9bd3-0f9632ed31cc",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "giveConsentUser",
              "fullTitle": "Consent Routes Tests giveConsentUser",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/user`)\n    .send({ privacyNoticeId: privacyNoticeId })\n    .set(\"Authorization\", userJwt)\n    .expect(201);\n(0, chai_1.expect)(response.body.event[0].eventState).to.equal(\"consent given\");\n(0, chai_1.expect)(response.body.piiProcessing.privacyNotice).to.equal(privacyNoticeId);",
              "err": {},
              "uuid": "92df1618-0b0e-43e2-870c-e2446204e43e",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsents - by user",
              "fullTitle": "Consent Routes Tests should getUserConsents - by user",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/me`)\n    .set(\"Authorization\", userJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"consents\");\n(0, chai_1.expect)(response.body.consents[0].record.recordId).to.equal(consentId);\n(0, chai_1.expect)(response.body.consents[0].piiProcessing.privacyNotice).to.equal(privacyNoticeId);",
              "err": {},
              "uuid": "de6ec86a-8c76-492a-8294-5a3c461ccb79",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsents - by participant",
              "fullTitle": "Consent Routes Tests should getUserConsents - by participant",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/participants/${providerUserIdentifier}/`)\n    .set(\"Authorization\", providerJWT)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"consents\");",
              "err": {},
              "uuid": "cf73d7e7-0fdd-4242-8ed3-cd948d7c1a77",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should attachTokenToConsent",
              "fullTitle": "Consent Routes Tests should attachTokenToConsent",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Mocking import consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/import\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/token`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    token,\n    providerDataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n})\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"successfully forwarded consent to the data consumer\");",
              "err": {},
              "uuid": "138e277c-ae46-47d0-a906-8af2610f25af",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the consent",
              "fullTitle": "Consent Routes Tests should validate the consent",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//mocking export consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/validate`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    token,\n})\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"token matches consent token\");\n(0, chai_1.expect)(response.body).to.have.property(\"verified\", true);",
              "err": {},
              "uuid": "4cbba14d-0abd-4031-a6f6-40cebcb6a054",
              "parentUUID": "480dcbe5-0875-47ff-9fef-f3a67eebbde3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ac0be5f9-65ef-44a6-a621-85124c322cda",
              "title": "Test error",
              "fullFile": "D:\\Visions\\consent-manager\\src\\tests\\consents.spec.ts",
              "file": "\\src\\tests\\consents.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not getUserConsents with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not getUserConsents with no authorization",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/me`)\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "b72aa229-962c-482e-b80d-5f9cb93afcd9",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get available exchanges with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not get available exchanges with no authorization",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/as?as=provider`)\n    .expect(401);",
                  "err": {},
                  "uuid": "4c02ffa5-1d32-443d-9678-3e85f1df3b32",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not getUserAvailableExchanges for a non-existent participant",
                  "fullTitle": "Consent Routes Tests Test error should not getUserAvailableExchanges for a non-existent participant",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/user`)\n    .set(\"Authorization\", userJwt)\n    .query({ participantId: nonExistentId })\n    .expect(500);",
                  "err": {},
                  "uuid": "86b8498c-6ca0-4be1-9b49-16a76d4bb0da",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get privacy notices by participant with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not get privacy notices by participant with no authorization",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}`)\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "7b6ad454-e112-4c54-9f63-6250844e73a0",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not getUserPrivacyNotices with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not getUserPrivacyNotices with no authorization",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}/${consumerBase64}`)\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "e9110ff3-8ac2-401b-b65c-934e5dcb96ab",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not getUserPrivacyNotices By a non-existent contract",
                  "fullTitle": "Consent Routes Tests Test error should not getUserPrivacyNotices By a non-existent contract",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst contract2 = \"http://localhost:8888/contracts/65d624e80e4afe01b8906e14\";\ncontract2base64 = Buffer.from(contract2).toString(\"base64\");\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}/${contract2base64}`)\n    .set(\"Authorization\", userJwt)\n    .expect(500);",
                  "err": {},
                  "uuid": "cba775e2-cfc4-4eb7-8664-ab131b7419ef",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get privacy notice by a non-existent id -by participant",
                  "fullTitle": "Consent Routes Tests Test error should not get privacy notice by a non-existent id -by participant",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${nonExistentId}`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .expect(404);\n(0, chai_1.expect)(response.body.error).to.equal(\"Privacy notice not found\");",
                  "err": {},
                  "uuid": "cce17570-a6f9-46ea-a409-85d9421ea4ca",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get privacy notice by a non-existent id -by user",
                  "fullTitle": "Consent Routes Tests Test error should not get privacy notice by a non-existent id -by user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${nonExistentId}/user`)\n    .set(\"Authorization\", userJwt);\n(0, chai_1.expect)(response.status).to.be.equal(404);\n(0, chai_1.expect)(response.body.error).to.equal(\"Privacy notice not found\");",
                  "err": {},
                  "uuid": "12a66370-d5bd-49ca-aa4e-dc6d3922bdba",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not give consent with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not give consent with no authorization",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents`)\n    .send({\n    privacyNoticeId: privacyNoticeId,\n})\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "ebfc2d10-6a50-4552-89c9-e702166742a0",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger data exchange for a non-existent consent",
                  "fullTitle": "Consent Routes Tests Test error should not trigger data exchange for a non-existent consent",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/6601a6265cbdad603e4e9a8c/data-exchange`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .send({ privacyNoticeId: privacyNoticeId })\n    .expect(404);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"Consent not found\");",
                  "err": {},
                  "uuid": "7521b821-3eb0-42d7-98d8-ce56ed7a5fc4",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not attach token to a non-existent consent",
                  "fullTitle": "Consent Routes Tests Test error should not attach token to a non-existent consent",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Mocking import consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/import\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${nonExistentId}/token`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    token,\n    providerDataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n})\n    .expect(404);\n(0, chai_1.expect)(response.body.error).to.equal(\"Consent not found\");",
                  "err": {},
                  "uuid": "2cd8660b-e7ab-44a1-a37e-3d04b5baf492",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate the consent with a token not attached to consent",
                  "fullTitle": "Consent Routes Tests Test error should not validate the consent with a token not attached to consent",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const notAttachedToken = crypto_1.default.randomUUID();\n//mocking export consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/validate`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    notAttachedToken,\n})\n    .expect(400);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"token does not match consent token\");",
                  "err": {},
                  "uuid": "64739fd4-bc40-48bf-bd81-c3ff27dbba60",
                  "parentUUID": "ac0be5f9-65ef-44a6-a621-85124c322cda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b72aa229-962c-482e-b80d-5f9cb93afcd9",
                "4c02ffa5-1d32-443d-9678-3e85f1df3b32",
                "86b8498c-6ca0-4be1-9b49-16a76d4bb0da",
                "7b6ad454-e112-4c54-9f63-6250844e73a0",
                "e9110ff3-8ac2-401b-b65c-934e5dcb96ab",
                "cba775e2-cfc4-4eb7-8664-ab131b7419ef",
                "cce17570-a6f9-46ea-a409-85d9421ea4ca",
                "12a66370-d5bd-49ca-aa4e-dc6d3922bdba",
                "ebfc2d10-6a50-4552-89c9-e702166742a0",
                "7521b821-3eb0-42d7-98d8-ce56ed7a5fc4",
                "2cd8660b-e7ab-44a1-a37e-3d04b5baf492",
                "64739fd4-bc40-48bf-bd81-c3ff27dbba60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 110,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            }
          ],
          "passes": [
            "0dcd696a-7295-402f-a927-0fa975a10022",
            "9a88acb3-234b-48d6-988e-5caa6ff95af4",
            "17a50f0c-2d31-4092-a289-d4526b94a2a7",
            "ed33d961-42f0-4d14-a40c-15621c8eec7c",
            "a3e8b130-03ce-4968-959e-72f33752fafe",
            "b082c567-bc52-4e8e-b712-12ced16abfda",
            "01f53024-1c20-4179-80b5-273367e95f13",
            "1f9e7c24-f141-4aab-92f7-13fc061730a5",
            "17808371-ab55-4a11-b652-e7fad7e2f901",
            "9de959f5-8082-42bb-ba6a-fee0cc0f8fd5",
            "bb95124d-c7aa-4755-aff4-97de4cd63221",
            "a5a5abc6-233b-4106-9bd3-0f9632ed31cc",
            "92df1618-0b0e-43e2-870c-e2446204e43e",
            "de6ec86a-8c76-492a-8294-5a3c461ccb79",
            "cf73d7e7-0fdd-4242-8ed3-cd948d7c1a77",
            "138e277c-ae46-47d0-a906-8af2610f25af",
            "4cbba14d-0abd-4031-a6f6-40cebcb6a054"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1157,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
